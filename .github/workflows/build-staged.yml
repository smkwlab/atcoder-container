name: Staged Container Build

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'update-**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant selection'
        required: true
        default: 'lite-only'
        type: choice
        options:
          - 'lite-only'
          - 'full-only' 
          - 'all-variants'
      force_build_all:
        description: 'Force build all variants (override auto-detection)'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/atcoder-container

jobs:
  # Stage 1: Determine build strategy
  determine-strategy:
    runs-on: ubuntu-latest
    outputs:
      build_lite: ${{ steps.strategy.outputs.build_lite }}
      build_full: ${{ steps.strategy.outputs.build_full }}
      build_full_amd64: ${{ steps.strategy.outputs.build_full_amd64 }}
      build_full_arm64: ${{ steps.strategy.outputs.build_full_arm64 }}
      platforms: ${{ steps.strategy.outputs.platforms }}
      is_main_branch: ${{ steps.strategy.outputs.is_main_branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need 2 to access HEAD^2 for pull_request events

      - name: Determine build strategy
        id: strategy
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF_NAME: ${{ github.ref_name }}
          BUILD_VARIANT: ${{ github.event.inputs.build_variant }}
          FORCE_BUILD_ALL: ${{ github.event.inputs.force_build_all }}
        run: |
          echo "Event: $EVENT_NAME"
          echo "Branch: $REF_NAME"

          # Get commit message
          # For pull_request events, GitHub creates a merge commit, so we need to get the PR branch tip
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            COMMIT_MESSAGE=$(git log -1 --pretty=%B HEAD^2 2>/dev/null || git log -1 --pretty=%B)
          else
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          fi
          echo "Commit message: $COMMIT_MESSAGE"
          
          # Default values
          BUILD_LITE="true"
          BUILD_FULL="false"
          PLATFORMS="linux/amd64"
          IS_MAIN="false"

          # Check if main branch
          if [[ "$REF_NAME" == "main" ]]; then
            IS_MAIN="true"
            PLATFORMS="linux/amd64,linux/arm64"
          fi

          # Auto-detect from commit message (check before PR default to allow override)
          if [[ "$COMMIT_MESSAGE" == *"[build-all]"* ]]; then
            BUILD_LITE="true"
            BUILD_FULL="true"
            PLATFORMS="linux/amd64,linux/arm64"  # Build both architectures
          elif [[ "$COMMIT_MESSAGE" == *"[build-full]"* ]]; then
            BUILD_FULL="true"
          fi

          # For pull requests: build Full version on x86_64 to catch issues early
          # Only set if not already configured by [build-all] or [build-full] tag
          if [[ "$EVENT_NAME" == "pull_request" && "$COMMIT_MESSAGE" != *"[build-all]"* && "$BUILD_FULL" != "true" ]]; then
            BUILD_FULL="true"
            PLATFORMS="linux/amd64"  # x86_64 only for faster CI
          fi

          # Manual workflow dispatch
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            case "$BUILD_VARIANT" in
              "lite-only")
                BUILD_LITE="true"
                BUILD_FULL="false"
                ;;
              "full-only")
                BUILD_LITE="false"
                BUILD_FULL="true"
                ;;
              "all-variants")
                BUILD_LITE="true"
                BUILD_FULL="true"
                ;;
            esac

            if [[ "$FORCE_BUILD_ALL" == "true" ]]; then
              BUILD_LITE="true"
              BUILD_FULL="true"
            fi
          fi

          # Main branch builds all variants by default
          if [[ "$IS_MAIN" == "true" && "$EVENT_NAME" == "push" ]]; then
            BUILD_FULL="true"
          fi

          # Determine architecture-specific build flags for Full version
          BUILD_FULL_AMD64="false"
          BUILD_FULL_ARM64="false"
          if [[ "$BUILD_FULL" == "true" ]]; then
            if [[ "$PLATFORMS" == *"linux/amd64"* ]]; then
              BUILD_FULL_AMD64="true"
            fi
            if [[ "$PLATFORMS" == *"linux/arm64"* ]]; then
              BUILD_FULL_ARM64="true"
            fi
          fi

          {
            echo "build_lite=$BUILD_LITE"
            echo "build_full=$BUILD_FULL"
            echo "build_full_amd64=$BUILD_FULL_AMD64"
            echo "build_full_arm64=$BUILD_FULL_ARM64"
            echo "platforms=$PLATFORMS"
            echo "is_main_branch=$IS_MAIN"
          } >> "$GITHUB_OUTPUT"

          echo "📋 Build Strategy:"
          echo "  Lite: $BUILD_LITE"
          echo "  Full: $BUILD_FULL (amd64: $BUILD_FULL_AMD64, arm64: $BUILD_FULL_ARM64)"
          echo "  Platforms: $PLATFORMS"
          echo "  Main branch: $IS_MAIN"

  # Stage 2: Build Lite Version (Priority)
  build-lite:
    needs: determine-strategy
    if: needs.determine-strategy.outputs.build_lite == 'true'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch: arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.platform == 'linux/arm64' && matrix.runner == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [dns]
              nameservers=["1.1.1.1"]

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-lite-${{ matrix.arch }}
            type=ref,event=pr,suffix=-lite-${{ matrix.arch }}
            type=raw,value=lite-latest-${{ matrix.arch }},enable={{is_default_branch}}
            type=raw,value=lite-${{ steps.date.outputs.date }}-${{ matrix.arch }},enable={{is_default_branch}}

      - name: Build and push Lite version
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.lite
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test basic functionality
        # Test on AMD64 for PRs, and both architectures for main branch
        if: (matrix.platform == 'linux/amd64' && github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $IMAGE_TAG ($(uname -m))"

          echo "🔍 Testing Python..."
          docker run --rm "$IMAGE_TAG" python3.13 --version

          echo "🔍 Testing Ruby..."
          docker run --rm "$IMAGE_TAG" ruby --version

          echo "🔍 Testing Rust..."
          docker run --rm "$IMAGE_TAG" rustc --version

          echo "🔍 Testing Node.js..."
          docker run --rm "$IMAGE_TAG" node --version

          echo "🔍 Testing Java..."
          docker run --rm "$IMAGE_TAG" java --version

          echo "🔍 Testing C++..."
          docker run --rm "$IMAGE_TAG" g++ --version

          echo "✅ All basic tests passed!"

  # Stage 3: Build Full Version (Parallel with Lite)
  build-full:
    needs: [determine-strategy]
    if: needs.determine-strategy.outputs.build_full == 'true'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch: arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check if this architecture should be built
        id: check
        run: |
          if [[ "${{ matrix.arch }}" == "amd64" && "${{ needs.determine-strategy.outputs.build_full_amd64 }}" != "true" ]]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "⏭️  Skipping amd64 build (not enabled for this run)"
          elif [[ "${{ matrix.arch }}" == "arm64" && "${{ needs.determine-strategy.outputs.build_full_arm64 }}" != "true" ]]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "⏭️  Skipping arm64 build (not enabled for this run)"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
            echo "✅ Building ${{ matrix.arch }}"
          fi

      - name: Get current date
        if: steps.check.outputs.skip != 'true'
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"

      - name: Checkout
        if: steps.check.outputs.skip != 'true'
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: steps.check.outputs.skip != 'true'
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [dns]
              nameservers=["1.1.1.1"]

      - name: Login to Container Registry
        if: steps.check.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.check.outputs.skip != 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-full-${{ matrix.arch }}
            type=ref,event=pr,suffix=-full-${{ matrix.arch }}
            type=raw,value=full-latest-${{ matrix.arch }},enable={{is_default_branch}}
            type=raw,value=full-${{ steps.date.outputs.date }}-${{ matrix.arch }},enable={{is_default_branch}}
            type=raw,value=latest-${{ matrix.arch }},enable={{is_default_branch}}
            type=raw,value=all-${{ matrix.arch }},enable={{is_default_branch}}
            type=raw,value=${{ steps.date.outputs.date }}-${{ matrix.arch }},enable={{is_default_branch}}

      - name: Build and push Full version
        if: steps.check.outputs.skip != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test basic functionality
        # Test on AMD64 for PRs, and both architectures for main branch
        if: steps.check.outputs.skip != 'true' && ((matrix.platform == 'linux/amd64' && github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && github.event_name == 'push'))
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $IMAGE_TAG ($(uname -m))"

          echo "🔍 Testing Python..."
          docker run --rm "$IMAGE_TAG" python3.13 --version

          echo "🔍 Testing Ruby..."
          docker run --rm "$IMAGE_TAG" ruby --version

          echo "🔍 Testing Rust..."
          docker run --rm "$IMAGE_TAG" rustc --version

          echo "🔍 Testing Node.js..."
          docker run --rm "$IMAGE_TAG" node --version

          echo "🔍 Testing Java..."
          docker run --rm "$IMAGE_TAG" java --version

          echo "🔍 Testing C++..."
          docker run --rm "$IMAGE_TAG" g++ --version

          echo "🔍 Testing scientific libraries..."
          docker run --rm "$IMAGE_TAG" python3.13 -c "import numpy; print('NumPy', numpy.__version__)"
          docker run --rm "$IMAGE_TAG" python3.13 -c "import scipy; print('SciPy', scipy.__version__)"
          docker run --rm "$IMAGE_TAG" python3.13 -c "import pandas; print('Pandas', pandas.__version__)"
          docker run --rm "$IMAGE_TAG" python3.13 -c "import sklearn; print('scikit-learn', sklearn.__version__)"

          # Only test numba on x86_64 (not available on ARM64)
          if [ "${{ matrix.platform }}" = "linux/amd64" ]; then
            echo "🔍 Testing Numba (x86_64 only)..."
            docker run --rm "$IMAGE_TAG" python3.13 -c "import numba; print('Numba', numba.__version__)"
          fi

          echo "✅ All tests passed!"

  # Stage 4: Summary and notification
  build-summary:
    needs: [determine-strategy, build-lite, build-full]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        env:
          LITE_BUILD: ${{ needs.determine-strategy.outputs.build_lite }}
          FULL_BUILD: ${{ needs.determine-strategy.outputs.build_full }}
          PLATFORMS: ${{ needs.determine-strategy.outputs.platforms }}
          LITE_RESULT: ${{ needs.build-lite.result || 'skipped' }}
          FULL_RESULT: ${{ needs.build-full.result || 'skipped' }}
        run: |
          {
            echo "## 🚀 Build Summary"
            echo ""
            echo "### 📋 Strategy"
            echo "- **Lite Build**: $LITE_BUILD"
            echo "- **Full Build**: $FULL_BUILD"
            echo "- **Platforms**: $PLATFORMS"
            echo ""
            echo "### 🎯 Results"
            echo "- **Lite Version**: $LITE_RESULT"
            echo "- **Full Version**: $FULL_RESULT"
            echo ""

            if [[ "$LITE_RESULT" == "success" ]]; then
              echo "✅ **Lite version built successfully** - Ready for competitive programming!"
            fi

            if [[ "$FULL_RESULT" == "success" ]]; then
              echo "✅ **Full version built successfully** - Complete development environment ready!"
            fi
          } >> "$GITHUB_STEP_SUMMARY"