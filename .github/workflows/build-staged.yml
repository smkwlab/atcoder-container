name: Staged Container Build

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'update-**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_variant:
        description: 'Build variant selection'
        required: true
        default: 'lite-only'
        type: choice
        options:
          - 'lite-only'
          - 'full-only' 
          - 'all-variants'
      force_build_all:
        description: 'Force build all variants (override auto-detection)'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/atcoder-container

jobs:
  # Stage 1: Determine build strategy
  determine-strategy:
    runs-on: ubuntu-latest
    outputs:
      build_lite: ${{ steps.strategy.outputs.build_lite }}
      build_full: ${{ steps.strategy.outputs.build_full }}
      platforms: ${{ steps.strategy.outputs.platforms }}
      is_main_branch: ${{ steps.strategy.outputs.is_main_branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine build strategy
        id: strategy
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"

          # Get commit message (works for both push and pull_request events)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          
          # Default values
          BUILD_LITE="true"
          BUILD_FULL="false"
          PLATFORMS="linux/amd64"
          IS_MAIN="false"
          
          # Check if main branch
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            IS_MAIN="true"
            PLATFORMS="linux/amd64,linux/arm64"
          fi
          
          # Manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            case "${{ github.event.inputs.build_variant }}" in
              "lite-only")
                BUILD_LITE="true"
                BUILD_FULL="false"
                ;;
              "full-only")
                BUILD_LITE="false" 
                BUILD_FULL="true"
                ;;
              "all-variants")
                BUILD_LITE="true"
                BUILD_FULL="true"
                ;;
            esac
            
            if [[ "${{ github.event.inputs.force_build_all }}" == "true" ]]; then
              BUILD_LITE="true"
              BUILD_FULL="true"
            fi
          fi
          
          # Auto-detect from commit message
          if [[ "$COMMIT_MESSAGE" == *"[build-all]"* ]]; then
            BUILD_LITE="true"
            BUILD_FULL="true"
          elif [[ "$COMMIT_MESSAGE" == *"[build-full]"* ]]; then
            BUILD_FULL="true"
          fi
          
          # Main branch builds all variants by default
          if [[ "$IS_MAIN" == "true" && "${{ github.event_name }}" == "push" ]]; then
            BUILD_FULL="true"
          fi
          
          echo "build_lite=$BUILD_LITE" >> $GITHUB_OUTPUT
          echo "build_full=$BUILD_FULL" >> $GITHUB_OUTPUT  
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "is_main_branch=$IS_MAIN" >> $GITHUB_OUTPUT
          
          echo "📋 Build Strategy:"
          echo "  Lite: $BUILD_LITE"
          echo "  Full: $BUILD_FULL" 
          echo "  Platforms: $PLATFORMS"
          echo "  Main branch: $IS_MAIN"

  # Stage 2: Build Lite Version (Priority)
  build-lite:
    needs: determine-strategy
    if: needs.determine-strategy.outputs.build_lite == 'true'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: arm-runner
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.platform == 'linux/arm64' && matrix.runner == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config-inline: |
            [dns]
              nameservers=["1.1.1.1"]

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-lite
            type=ref,event=pr,suffix=-lite
            type=raw,value=lite-latest,enable={{is_default_branch}}
            type=raw,value=lite-${{ steps.date.outputs.date }},enable={{is_default_branch}}

      - name: Build and push Lite version
        # Skip ARM64 on PRs to avoid slow QEMU emulation
        if: matrix.platform != 'linux/arm64' || github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.lite
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test basic functionality
        # Only test on AMD64 for PRs
        if: matrix.platform == 'linux/amd64' && github.event_name == 'pull_request'
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $IMAGE_TAG"

          echo "🔍 Testing Python..."
          docker run --rm $IMAGE_TAG python3.13 --version

          echo "🔍 Testing Ruby..."
          docker run --rm $IMAGE_TAG ruby --version

          echo "🔍 Testing Rust..."
          docker run --rm $IMAGE_TAG rustc --version

          echo "🔍 Testing Node.js..."
          docker run --rm $IMAGE_TAG node --version

          echo "🔍 Testing Java..."
          docker run --rm $IMAGE_TAG java --version

          echo "🔍 Testing C++..."
          docker run --rm $IMAGE_TAG g++ --version

          echo "✅ All basic tests passed!"

  # Stage 3: Build Full Version (After Lite success)
  build-full:
    needs: [determine-strategy, build-lite]
    if: always() && needs.determine-strategy.outputs.build_full == 'true' && (needs.build-lite.result == 'success' || needs.build-lite.result == 'skipped')
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: arm-runner
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.platform == 'linux/arm64' && matrix.runner == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config-inline: |
            [dns]
              nameservers=["1.1.1.1"]

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-full
            type=ref,event=pr,suffix=-full
            type=raw,value=full-latest,enable={{is_default_branch}}
            type=raw,value=full-${{ steps.date.outputs.date }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=all,enable={{is_default_branch}}
            type=raw,value=${{ steps.date.outputs.date }},enable={{is_default_branch}}

      - name: Build and push Full version
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Stage 4: Summary and notification
  build-summary:
    needs: [determine-strategy, build-lite, build-full]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Strategy" >> $GITHUB_STEP_SUMMARY
          echo "- **Lite Build**: ${{ needs.determine-strategy.outputs.build_lite }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Build**: ${{ needs.determine-strategy.outputs.build_full }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: ${{ needs.determine-strategy.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Lite Version**: ${{ needs.build-lite.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Version**: ${{ needs.build-full.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-lite.result }}" == "success" ]]; then
            echo "✅ **Lite version built successfully** - Ready for competitive programming!" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-full.result }}" == "success" ]]; then
            echo "✅ **Full version built successfully** - Complete development environment ready!" >> $GITHUB_STEP_SUMMARY
          fi